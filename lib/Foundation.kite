-- Constants
pi = 3.14159265359

--- Functional

-- a -> a
id = |x| -> { x }

length = |xs| -> {
  match xs {
    [] -> 0,
    x,xs -> 1 + length (xs)
  }
}

-- composition
-- (b -> c) -> (a -> b) -> (a -> c)
{.} = |f, g| -> {
  |x| -> {
    f (g (x))
  }
}

-- (a -> b -> c) -> (b -> a -> c)
flip = |f, x, y| -> {
  f (y, x)
}

--- Boolean

-- Bool -> Bool
not = |p| -> {
  if p then False else True
}

-- Bool -> Bool -> Bool
{&&} = |l, r| -> {
  if l then r else False
}

-- Bool -> Bool -> Bool
{||} = |l, r| -> {
  if l then True else r
}

--- Equality (built in: ==)

-- a -> a -> Bool
{/=} = |l, r| -> {
  not (l == r)
}

--- Ordering (built in: <=)

-- a -> a -> Bool
{<} = |l, r| -> {
  not (r <= l)
}

-- a -> a -> Bool
{>} = |l, r| -> {
  (r <= l) && (r /= l)
}

-- a -> a -> Bool
{>=} = |l, r| -> {
  (l > r) || (l == r)
}


--- Pairs

asPair = |a, b| -> {
  (a, b)
}

fst = |p| -> {
  match p {
    (a , b) -> a
  }
}

snd = |p| -> {
  match p {
    (a , b) -> b
  }
}

--- Lists

-- [a] -> Int -> a
{#} = |xs, idx| -> {
  match xs {
    [] -> panic ("list index too large"),
    x,xs -> if idx == 0 then x else xs # (idx - 1)
    -- [], _           -> panic,
    -- x:xs, i | i < 0 -> panic,
    -- x:xs, 0         -> x,
    -- x:xs, i         -> xs # (i - 1)
  }
}

-- [a] -> Bool
empty = |xs| -> {
  match xs {
    [] -> True,
    _ -> False
  }
}

-- [a] -> a
head = |xs| -> {
  match xs {
    [] -> panic ("can't take head of empty list"),
    x,xs -> x
  }
}

-- [a] -> [a]
tail = |xs| -> {
  match xs {
    [] -> panic ("can't take tail of empty list")
    x,xs -> xs
  }
}

-- [a] -> [a]
init = |xs| -> {
  match xs {
    [] -> panic ("can't take init of empty list"),
    x,xs -> if empty (xs) then [] else x : init (xs)
  }
}

-- [a] -> a
last = |xs| -> {
  match xs {
    [] -> panic ("can't take last of empty list"),
    x,xs -> if empty (xs) then x else last (xs)
  }
}

-- concatenation
-- [a] -> [a] -> [a]
{++} = |l, r| -> {
  match l {
    [] -> r,
    x,xs -> x : (xs ++ r)
  }
}

-- (a -> b) -> [a] -> [b]
map = |f, ls| -> {
  match ls {
    [] -> [],
    x,xs -> f (x) : map (f, xs)
  }
}

-- (a -> b -> a) -> a -> [b] -> a
fold = |f, acc, xs| -> {
  match xs {
    [] -> acc,
    x,xs -> fold (f, f (acc, x), xs)
  }
}

-- (a -> b -> a) -> [b] -> a
fold1 = |f, xs| -> {
  if empty (xs)
    then head (xs)
    else fold (f, head (xs), tail (xs))
}

-- (a -> Bool) -> [a] -> [a]
filter = |f, ls| -> {
  match ls {
    []    -> [],
    x,xs  -> if f (x)
               then x : filter (f, xs)
               else filter (f, xs)
  }
}

-- Int -> [a] -> [a]
take = |n, xs| -> {
  if (n <= 0) || empty (xs)
    then []
    else head (xs) : take (n - 1, tail (xs))
}

-- Int -> [a] -> [a]
drop = |n, xs| -> {
  if (n <= 0) || empty (xs)
    then xs
    else drop (n - 1, tail (xs))
}

-- [Bool] -> Bool
and = fold ((&&), True)

-- [Bool] -> Bool
or = fold ((||), False)

-- (a -> Bool) -> [a] -> Bool
all = |p| -> {
  and . map (p)
}

-- (a -> Bool) -> [a] -> Bool
any = |p| -> {
  or . map (p)
}

-- [[a]] -> [a]
flatten = fold1 ((++))

-- ([a] -> [b]) -> [[a]] -> [b]
flatMap = |f| -> {
  flatten . map (f)
}

-- a -> [a] -> Bool
elem = |el| -> {
  any ((el==))
}

-- [a] -> [a]
reverse = |xs| -> {
  match xs {
    []    -> [],
    x,xs  -> (reverse . tail) (xs) ++ [x]
  }
}

-- union, intersect, takeWhile, dropWhile, find, delete, deleteBy
union = (flip . fold) (|acc, x| -> {
  if x `elem acc
    then acc
    else x : acc
})

intersect = |xs| -> {
  f = |acc, x| -> {
    if x `elem xs
      then x : acc
      else acc
  }
  fold (f, [])
}

-- quicksort
-- (a -> a -> Bool) -> [a] -> [a]
sortBy = |cmp, xs| -> {
  match xs {
    []   -> [],
    x,xs -> sortBy (cmp, filter (cmp (x), xs))
         ++ x
         : sortBy (cmp, filter (not . cmp (x), xs))
  }
}

-- [a] -> [a]
sort = sortBy ((<))

--- List utilities

-- Int -> Int -> Int -> [Int]
rangeStep = |from, to, step| -> {
  inner = |from, to, ls| -> {
    if from > to
      then ls
      else from : inner (step + from, to, ls)
  }
  inner(from, to, [])
}

-- Int -> Int -> [Int]
range = |from, to| -> {
  rangeStep (from, to, 1)
}

--- Numeric

-- Float -> Float
-- sqrt = |n| -> {
--   x0 = if n < 10 then 200.0 else 600.0
--   inner = |i, n'| -> {

--   }
--   inner
-- }

-- Int -> Int -> Int
{^} = |n, exp| -> {
  if exp == 0
    then 1
    else n * n ^ (exp - 1)
}

-- [a] -> a
sum = fold1 ((+))

-- [a] -> a
product = fold1 ((*))

-- a -> a -> a
min = |a, b| -> {
  if a < b then a else b
}

-- a -> a -> a
max = |a, b| -> {
  if a > b then a else b
}

-- [a] -> a
minimum = fold1 (min)

-- [a] -> a
maximum = fold1 (max)

-- Int -> Bool
even = (== 0) . (% 2)

-- Int -> Bool
odd = not . even

-- Int -> Int
negate = (0-)

-- Float -> Float
negatef = (0.0-)

-- Int -> Int
abs = |n| -> {
  if n < 0
    then negate (n)
    else n
}

--- Misc

-- (a -> Bool) -> (a -> a) -> a -> a
until = |p, f, x| -> {
  if p (x)
    then x
    else until (p, f, f (x))
}

-- (a -> Bool) -> (a -> a) -> a -> a
while = |p, f, x| -> {
  until (not . p, f, x)
}