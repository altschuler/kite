-- Type aliases
type String = [Char]

--- Constants
pi = 3.14159265359

--- Functional

id :: a -> a
id = |x| -> { x }

{$} :: (a -> b) -> a -> b
{$} = |f, x| -> {
  f (x)
}

-- composition
{.} :: (b -> c) -> (a -> b) -> (a -> c)
{.} = |f, g| -> {
  |x| -> {
    f (g (x))
  }
}

flip :: (a -> b -> c) -> (b -> a -> c)
flip = |f, x, y| -> {
  f (y, x)
}

--- Boolean

not :: Bool -> Bool
not = |p| -> {
  if p then False else True
}

{&&} :: Bool -> Bool -> Bool
{&&} = |l, r| -> {
  if l then r else False
}

{||} :: Bool -> Bool -> Bool
{||} = |l, r| -> {
  if l then True else r
}

--- Equality (built in: ==)

{/=} :: a -> a -> Bool
{/=} = |l, r| -> {
  not (l == r)
}

--- Ordering (built in: <=)

{<} :: a -> a -> Bool
{<} = |l, r| -> {
  not (r <= l)
}

{>} :: a -> a -> Bool
{>} = |l, r| -> {
  (r <= l) && (r /= l)
}

{>=} :: a -> a -> Bool
{>=} = |l, r| -> {
  (l > r) || (l == r)
}


--- Pairs

asPair :: a -> b -> (a, b)
asPair = |a, b| -> {
  (a, b)
}

{<>} :: a -> b -> (a, b)
{<>} = asPair

fst :: (a, b) -> a
fst = |p| -> {
  match p {
    (a , b) -> a
  }
}

snd :: (a, b) -> b
snd = |p| -> {
  match p {
    (a , b) -> b
  }
}

curry :: ((a, b) -> c) -> (a -> b -> c)
curry = |f| -> {
  |a,b| -> {
    f((a,b))
  }       
}

uncurry :: (a -> b -> c) -> ((a, b) -> c)
uncurry = |f| -> {
  |p| -> {
    match p {
      (a, b) -> f(a,b)
    }         
  } 
}

--- Lists

{#} :: [a] -> Int -> a
{#} = |xs, idx| -> {
  match xs {
    [] -> panic ("list index too large"),
    x,xs -> if idx == 0 then x else xs # (idx - 1)
    -- [], _           -> panic,
    -- x:xs, i | i < 0 -> panic,
    -- x:xs, 0         -> x,
    -- x:xs, i         -> xs # (i - 1)
  }
}

length :: [a] -> Int
length = |xs| -> {
  match xs {
    [] -> 0,
    x,xs -> 1 + length (xs)
  }
}

empty :: [a] -> Bool
empty = |xs| -> {
  match xs {
    [] -> True,
    _ -> False
  }
}

head :: [a] -> a
head = |xs| -> {
  match xs {
    [] -> panic ("can't take head of empty list"),
    x,xs -> x
  }
}

tail :: [a] -> [a]
tail = |xs| -> {
  match xs {
    [] -> panic ("can't take tail of empty list"),
    x,xs -> xs
  }
}

init :: [a] -> [a]
init = |xs| -> {
  match xs {
    [] -> panic ("can't take init of empty list"),
    x,xs -> if empty (xs) then [] else x : init (xs)
  }
}

last :: [a] -> a
last = |xs| -> {
  match xs {
    [] -> panic ("can't take last of empty list"),
    x,xs -> if empty (xs) then x else last (xs)
  }
}

-- concatenation
{++} :: [a] -> [a] -> [a]
{++} = |l, r| -> {
  match l {
    [] -> r,
    x,xs -> x : (xs ++ r)
  }
}

map :: (a -> b) -> [a] -> [b]
map = |f, ls| -> {
  match ls {
    [] -> [],
    x,xs -> f (x) : map (f, xs)
  }
}

fold :: (a -> b -> a) -> a -> [b] -> a
fold = |f, acc, xs| -> {
  match xs {
    [] -> acc,
    x,xs -> fold (f, f (acc, x), xs)
  }
}

fold1 :: (a -> b -> a) -> [b] -> a
fold1 = |f, xs| -> {
  if empty (xs)
    then panic ("fold1: empty list")
    else fold (f, head (xs), tail (xs))
}

filter :: (a -> Bool) -> [a] -> [a]
filter = |f, ls| -> {
  match ls {
    []    -> [],
    x,xs  -> if f (x)
               then x : filter (f, xs)
               else filter (f, xs)
  }
}

take :: Int -> [a] -> [a]
take = |n, xs| -> {
  if (n <= 0) || empty (xs)
    then []
    else head (xs) : take (n - 1, tail (xs))
}

drop :: Int -> [a] -> [a]
drop = |n, xs| -> {
  if (n <= 0) || empty (xs)
    then xs
    else drop (n - 1, tail (xs))
}

zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith = |f, as, bs| -> {
  if empty (as) || empty (bs)
  then []
  else f(head (as), head (bs)) : zipWith (f, tail (as), tail (bs))
}

zip :: [a] -> [b] -> [(a, b)]
zip = zipWith (asPair)

and :: [Bool] -> Bool
and = fold ((&&), True)

or :: [Bool] -> Bool
or = fold ((||), False)

all :: (a -> Bool) -> [a] -> Bool
all = |p| -> {
  and . map (p)
}

any :: (a -> Bool) -> [a] -> Bool
any = |p| -> {
  or . map (p)
}

flatten :: [[a]] -> [a]
flatten = fold1 ((++))

flatMap :: ([a] -> [b]) -> [[a]] -> [b]
flatMap = |f| -> {
  flatten . map (f)
}

elem :: a -> [a] -> Bool
elem = |el| -> {
  any ((el==))
}

reverse :: [a] -> [a]
reverse = |xs| -> {
  match xs {
    []    -> [],
    x,xs  -> reverse (xs) ++ [x]
  }
}

-- union, intersect, takeWhile, dropWhile, find, delete, deleteBy
union ::  [a] -> [a] -> [a]
union = |xs| -> {
  (flip . fold) (|acc, x| -> {
    if x `elem acc
      then acc
      else x : acc
  }, reverse (xs))
}

intersect ::  [a] -> [a] -> [a]
intersect = |xs| -> {
  f = |acc, x| -> {
    if x `elem xs
      then x : acc
      else acc
  }
  fold (f, []) . reverse
}

-- quicksort
sortBy :: (a -> a -> Bool) -> [a] -> [a]
sortBy = |cmp, xs| -> {
  match xs {
    []   -> [],
    x,xs -> sortBy (cmp, filter (cmp (x), xs))
         ++ x
         : sortBy (cmp, filter (not . cmp (x), xs))
  }
}

sort :: [a] -> [a]
sort = sortBy ((>))

--- List utilities

rangeStep :: Int -> Int -> Int -> [Int]
rangeStep = |from, to, step| -> {
  inner = |from, to, ls| -> {
    if from > to
      then ls
      else from : inner (step + from, to, ls)
  }
  inner(from, to, [])
}

range :: Int -> Int -> [Int]
range = |from, to| -> {
  rangeStep (from, to, 1)
}

--- Numeric

-- Float -> Float
-- sqrt = |n| -> {
--   x0 = if n < 10 then 200.0 else 600.0
--   inner = |i, n'| -> {

--   }
--   inner
-- }

{**} :: Int -> Int -> Int
{**} = |n, exp| -> {
  if exp == 0
    then 1
    else n * n ** (exp - 1)
}

powMod :: Int -> Int -> Int -> Int
powMod = |b, e, m| -> {
    if e == 0
       then 1
       else if e % 2 == 0
         then ((powMod(b, (e / 2), m))**2 % m)
         else ((b * powMod(b, (e - 1), m)) % m)
}

sum :: [a] -> a
sum = fold1 ((+))

product :: [a] -> a
product = fold1 ((*))

min :: a -> a -> a
min = |a, b| -> {
  if a < b then a else b
}

max :: a -> a -> a
max = |a, b| -> {
  if a > b then a else b
}

minimum :: [a] -> a
minimum = fold1 (min)

maximum :: [a] -> a
maximum = fold1 (max)

even :: Int -> Bool
even = (== 0) . (% 2)

odd :: Int -> Bool
odd = not . even

negate :: Int -> Int
negate = (0-)

negatef :: Float -> Float
negatef = (0.0-)

abs :: Int -> Int
abs = |n| -> {
  if n < 0
    then negate (n)
    else n
}

--- Misc

until :: (a -> Bool) -> (a -> a) -> a -> a
until = |p, f, x| -> {
  if p (x)
    then x
    else until (p, f, f (x))
}

while :: (a -> Bool) -> (a -> a) -> a -> a
while = |p| -> {
  until (not . p)
}